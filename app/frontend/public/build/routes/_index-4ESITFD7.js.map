{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../app/routes/_index.tsx", "../../../app/api-services/open-weather-service.ts"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1754682648196.7297\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, useLoaderData, useActionData, useNavigation } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { getWeatherByCity, formatTemperature, capitalizeDescription } from \"~/api-services/open-weather-service\";\nexport const meta = () => {\n  return [{\n    title: \"Weather App\"\n  }, {\n    name: \"description\",\n    content: \"Get current weather information for any city\"\n  }];\n};\nexport const loader = async () => {\n  // Load default weather for Ottawa\n  try {\n    const defaultWeather = await getWeatherByCity(\"Ottawa\");\n    return json({\n      defaultWeather\n    });\n  } catch (error) {\n    return json({\n      defaultWeather: null,\n      error: \"Failed to load default weather\"\n    });\n  }\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const city = formData.get(\"city\");\n  if (!city || city.trim() === \"\") {\n    return json({\n      error: \"Please enter a city name\"\n    }, {\n      status: 400\n    });\n  }\n  try {\n    const weather = await getWeatherByCity(city.trim());\n    return json({\n      weather\n    });\n  } catch (error) {\n    return json({\n      error: error instanceof Error ? error.message : \"Failed to fetch weather data\"\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function Index() {\n  _s();\n  const {\n    defaultWeather\n  } = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const [city, setCity] = useState(\"\");\n  const isLoading = navigation.state === \"submitting\";\n  const currentWeather = actionData?.weather || defaultWeather;\n  return <div style={{\n    fontFamily: \"system-ui, sans-serif\",\n    lineHeight: \"1.8\"\n  }}>\n      <div style={{\n      maxWidth: \"800px\",\n      margin: \"0 auto\",\n      padding: \"2rem\"\n    }}>\n        <h1 style={{\n        textAlign: \"center\",\n        color: \"#2563eb\",\n        marginBottom: \"2rem\"\n      }}>\n          \uD83C\uDF24\uFE0F Weather App\n        </h1>\n\n        <div style={{\n        marginBottom: \"2rem\"\n      }}>\n          <Form method=\"post\" style={{\n          display: \"flex\",\n          gap: \"1rem\",\n          alignItems: \"center\"\n        }}>\n            <input type=\"text\" name=\"city\" value={city} onChange={e => setCity(e.target.value)} placeholder=\"Enter city name (e.g., Toronto, London)\" style={{\n            flex: 1,\n            padding: \"0.75rem\",\n            border: \"2px solid #d1d5db\",\n            borderRadius: \"0.5rem\",\n            fontSize: \"1rem\"\n          }} disabled={isLoading} />\n            <button type=\"submit\" disabled={isLoading} style={{\n            padding: \"0.75rem 1.5rem\",\n            backgroundColor: isLoading ? \"#9ca3af\" : \"#2563eb\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"0.5rem\",\n            fontSize: \"1rem\",\n            cursor: isLoading ? \"not-allowed\" : \"pointer\"\n          }}>\n              {isLoading ? \"Loading...\" : \"Get Weather\"}\n            </button>\n          </Form>\n        </div>\n\n        {actionData?.error && <div style={{\n        padding: \"1rem\",\n        backgroundColor: \"#fef2f2\",\n        color: \"#dc2626\",\n        borderRadius: \"0.5rem\",\n        marginBottom: \"2rem\",\n        border: \"1px solid #fecaca\"\n      }}>\n            \u274C {actionData.error}\n          </div>}\n\n        {currentWeather && <div style={{\n        backgroundColor: \"#f8fafc\",\n        border: \"1px solid #e2e8f0\",\n        borderRadius: \"1rem\",\n        padding: \"2rem\",\n        boxShadow: \"0 4px 6px -1px rgba(0, 0, 0, 0.1)\"\n      }}>\n            <div style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"start\",\n          marginBottom: \"1.5rem\"\n        }}>\n              <div>\n                <h2 style={{\n              margin: 0,\n              color: \"#1e293b\",\n              fontSize: \"1.5rem\"\n            }}>\n                  \uD83D\uDCCD {currentWeather.data.name}, {currentWeather.data.sys.country}\n                </h2>\n                <p style={{\n              margin: \"0.5rem 0\",\n              color: \"#64748b\"\n            }}>\n                  Data source: {currentWeather.source === 'cache' ? '\uD83D\uDCE6 Cache' : '\uD83C\uDF10 Live API'}\n                </p>\n              </div>\n              <div style={{\n            textAlign: \"right\"\n          }}>\n                <div style={{\n              fontSize: \"3rem\",\n              margin: 0\n            }}>\n                  {formatTemperature(currentWeather.data.main.temp)}\n                </div>\n                <div style={{\n              color: \"#64748b\"\n            }}>\n                  Feels like {formatTemperature(currentWeather.data.main.feels_like)}\n                </div>\n              </div>\n            </div>\n\n            <div style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n          gap: \"1rem\"\n        }}>\n              <div>\n                <h3 style={{\n              color: \"#374151\",\n              marginBottom: \"0.5rem\"\n            }}>\uD83C\uDF24\uFE0F Conditions</h3>\n                <p>{capitalizeDescription(currentWeather.data.weather[0].description)}</p>\n              </div>\n              \n              <div>\n                <h3 style={{\n              color: \"#374151\",\n              marginBottom: \"0.5rem\"\n            }}>\uD83C\uDF21\uFE0F Temperature</h3>\n                <p>High: {formatTemperature(currentWeather.data.main.temp_max)}</p>\n                <p>Low: {formatTemperature(currentWeather.data.main.temp_min)}</p>\n              </div>\n              \n              <div>\n                <h3 style={{\n              color: \"#374151\",\n              marginBottom: \"0.5rem\"\n            }}>\uD83D\uDCA7 Details</h3>\n                <p>Humidity: {currentWeather.data.main.humidity}%</p>\n                <p>Pressure: {currentWeather.data.main.pressure} hPa</p>\n              </div>\n              \n              <div>\n                <h3 style={{\n              color: \"#374151\",\n              marginBottom: \"0.5rem\"\n            }}>\uD83D\uDCA8 Wind</h3>\n                <p>Speed: {currentWeather.data.wind.speed} m/s</p>\n                <p>Direction: {currentWeather.data.wind.deg}\u00B0</p>\n              </div>\n            </div>\n\n            <div style={{\n          marginTop: \"1.5rem\",\n          padding: \"1rem\",\n          backgroundColor: \"#e0f2fe\",\n          borderRadius: \"0.5rem\"\n        }}>\n              <p style={{\n            margin: 0,\n            fontSize: \"0.875rem\",\n            color: \"#0369a1\"\n          }}>\n                \uD83D\uDCA1 This weather data is fetched from our backend API with Redis caching for improved performance.\n              </p>\n            </div>\n          </div>}\n      </div>\n    </div>;\n}\n_s(Index, \"+H6zifHwx+GO1vszzrbdw/xeDic=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\api-services\\\\open-weather-service.ts\"\n);\nimport.meta.hot.lastModified = \"1754682648185.0776\";\n}\n// REMIX HMR END\n\n// Updated to call our backend instead of OpenWeather API directly\n\nexport interface WeatherData {\n  coord: {\n    lon: number;\n    lat: number;\n  };\n  weather: Array<{\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n  }>;\n  base: string;\n  main: {\n    temp: number;\n    feels_like: number;\n    temp_min: number;\n    temp_max: number;\n    pressure: number;\n    humidity: number;\n    sea_level?: number;\n    grnd_level?: number;\n  };\n  visibility: number;\n  wind: {\n    speed: number;\n    deg: number;\n    gust?: number;\n  };\n  clouds: {\n    all: number;\n  };\n  dt: number;\n  sys: {\n    type: number;\n    id: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n  };\n  timezone: number;\n  id: number;\n  name: string;\n  cod: number;\n}\n\nexport interface WeatherResponse {\n  source: 'api' | 'cache';\n  data: WeatherData;\n}\n\n/**\n * Fetches weather data for a given city from our backend API\n */\nexport async function getWeatherByCity(city: string): Promise<WeatherResponse> {\n  try {\n    // Call our backend instead of OpenWeather API directly\n    const backendUrl = getBackendUrl();\n    const response = await fetch(`${backendUrl}/weather?city=${encodeURIComponent(city)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Weather API returned ${response.status}: ${response.statusText}`);\n    }\n    \n    const weatherData: WeatherResponse = await response.json();\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw new Error(\n      error instanceof Error \n        ? `Failed to fetch weather data: ${error.message}`\n        : 'Failed to fetch weather data'\n    );\n  }\n}\n\n/**\n * Get the backend URL based on environment\n */\nfunction getBackendUrl(): string {\n  // In development, use localhost\n  if (typeof window !== 'undefined') {\n    // Browser environment\n    return 'http://localhost:3000';\n  }\n  \n  // Server-side rendering environment\n  // In production, this would be your Kubernetes service URL\n  return process.env.BACKEND_URL || 'http://localhost:3000';\n}\n\n/**\n * Helper function to format temperature\n */\nexport function formatTemperature(temp: number): string {\n  return `${Math.round(temp)}\u00B0C`;\n}\n\n/**\n * Helper function to capitalize weather description\n */\nexport function capitalizeDescription(description: string): string {\n  return description\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}"],
  "mappings": "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",
  "names": ["import_react"]
}
